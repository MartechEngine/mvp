
services:
  # Backend Service (FastAPI)
  backend:
    build:
      context: ./backend
    container_name: martech-backend-dev
    env_file:
      - ./backend/.env
    volumes:
      # Mount the application code for live reloading
      - ./backend/app:/home/appuser/app
    ports:
      - "8000:8000"
    # Override the production CMD for development with hot-reloading
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - martech-network

  # Frontend Service (Next.js)
  frontend:
    build:
      context: ./frontend
    container_name: martech-frontend-dev
    env_file:
      - ./frontend/.env.local
    volumes:
      # Mount the source code for live reloading, excluding node_modules
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
      - /usr/src/app/.next
    ports:
      - "3000:3000"
    # Override the production CMD for development with hot-reloading
    command: npm run dev
    depends_on:
      - backend
    networks:
      - martech-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: martech-postgres-dev
    env_file:
      - ./.env

    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - martech-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U martech_user -d martechengine_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: martech-redis-dev
    ports:
      - "6379:6379"
    networks:
      - martech-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  martech-network:
    driver: bridge
